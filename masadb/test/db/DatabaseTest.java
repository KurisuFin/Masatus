package db;


import db.Database;
import java.util.List;
import models.Reference;
import org.junit.After;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import play.test.FakeApplication;
import static play.test.Helpers.*;

public class DatabaseTest {

    FakeApplication fa;
    Reference ref1, ref2;

    @Test
    public void emptyDatabaseHasNoEntries() {
        assertEquals(0, Database.findAll().size());
    }

    @Before
    public void setUp() {
        fa = fakeApplication(inMemoryDatabase());
        start(fa);

        ref1 = new Reference("M12", "The Title", "Masa",
                "Masa Publishing", 2012);
        ref1.setAddress("Masala");
        ref1.setEdition("Second");
        ref1.setVolume(7);

        ref2 = new Reference("M13", "The Title II", "Masa II",
                "Masa Publishing", 2013);
        ref2.setAddress("Masala");
        ref2.setEdition(null);
        ref2.setVolume(7);
    }

    @After
    public void tearDown() {
        stop(fa);
    }

    @Test
    public void idIsAutogenerated() {
        Database.save(ref1);
        assertNotNull(ref1.getId());
        Database.save(ref2);
        assertNotNull(ref2.getId());
        assertTrue(!ref1.getId().equals(ref2.getId()));
    }

    @Test
    public void savedEntryHasCorrectAttributes() {
        Database.save(ref1);

        List<Reference> all = Database.findAll();
        assertEquals(1, all.size());
        assertEquals(ref1.getCiteKey(), all.get(0).getCiteKey());
        assertEquals(ref1.getTitle(), all.get(0).getTitle());
        assertEquals(ref1.getAuthor(), all.get(0).getAuthor());
        assertEquals(ref1.getPublisher(), all.get(0).getPublisher());
        assertEquals(ref1.getYear(), all.get(0).getYear());
        assertEquals(ref1.getAddress(), all.get(0).getAddress());
        assertEquals(ref1.getEdition(), all.get(0).getEdition());
        assertEquals(ref1.getVolume(), all.get(0).getVolume());
    }

    @Test
    public void addingTwoEntriesWorks() {
        Database.save(ref1);
        Database.save(ref2);
        List<Reference> all = Database.findAll();
        assertEquals(2, all.size());
    }

    @Test
    public void deleteRemovesAnEntry() {
        Database.save(ref1);
        Database.save(ref2);
        assertTrue(Database.delete(ref1.getId()));
        List<Reference> all = Database.findAll();
        assertEquals(1, all.size());
        assertEquals(ref2.getId(), all.get(0).getId());
    }
}
