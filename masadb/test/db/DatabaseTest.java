package db;

import db.Database;
import java.util.List;
import models.Reference;
import org.junit.After;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import play.test.FakeApplication;
import static play.test.Helpers.*;
import static models.ReferenceType.*;

public class DatabaseTest {

    FakeApplication fa;
    Reference ref1, ref2;

    @Test
    public void emptyDatabaseHasNoEntries() {
        assertEquals(0, Database.findAll().size());
    }

    @Before
    public void setUp() {
        fa = fakeApplication(inMemoryDatabase());
        start(fa);

        ref1 = new Reference(Book, "M12", "The Title", "Masa", 2012);
        ref1.setMonth("jan");
        ref1.setVolume(7);
        ref1.setNumber(null);
        ref1.setEdition("Second");
        ref1.setPages(null);
        ref1.setBookTitle(null);
        ref1.setPublisher("Masa Publishing");
        ref1.setAddress("Masala");
        ref1.setOrganization("Masala University");

        ref2 = new Reference(Article, "M13", "The Title II", "Masa II", 2013);
        ref2.setMonth("feb");
        ref2.setVolume(null);
        ref2.setNumber(13);
        ref2.setEdition(null);
        ref2.setPages("123--321");
        ref2.setBookTitle("Book Title");
        ref2.setPublisher("Masa Publishing");
        ref2.setAddress("Masala");
        ref2.setOrganization("Masala University");
    }

    @After
    public void tearDown() {
        stop(fa);
    }

    @Test
    public void idIsAutogenerated() {
        Database.save(ref1);
        assertNotNull(ref1.getId());
        Database.save(ref2);
        assertNotNull(ref2.getId());
        assertTrue(!ref1.getId().equals(ref2.getId()));
    }

    @Test
    public void savedEntryHasCorrectAttributes() {
        Database.save(ref1);

        List<Reference> all = Database.findAll();
        assertEquals(1, all.size());
        assertEquals(ref1.getType(), all.get(0).getType());
        assertEquals(ref1.getCiteKey(), all.get(0).getCiteKey());
        assertEquals(ref1.getTitle(), all.get(0).getTitle());
        assertEquals(ref1.getAuthor(), all.get(0).getAuthor());
        assertEquals(ref1.getYear(), all.get(0).getYear());
        assertEquals(ref1.getMonth(), all.get(0).getMonth());
        assertEquals(ref1.getVolume(), all.get(0).getVolume());
        assertEquals(ref1.getNumber(), all.get(0).getNumber());
        assertEquals(ref1.getEdition(), all.get(0).getEdition());
        assertEquals(ref1.getPages(), all.get(0).getPages());
        assertEquals(ref1.getBookTitle(), all.get(0).getBookTitle());
        assertEquals(ref1.getPublisher(), all.get(0).getPublisher());
        assertEquals(ref1.getAddress(), all.get(0).getAddress());
        assertEquals(ref1.getOrganization(), all.get(0).getOrganization());
    }

    @Test
    public void addingTwoEntriesWorks() {
        Database.save(ref1);
        Database.save(ref2);
        List<Reference> all = Database.findAll();
        assertEquals(2, all.size());
    }

    @Test
    public void deleteRemovesAnEntry() {
        Database.save(ref1);
        Database.save(ref2);
        assertTrue(Database.delete(ref1.getId()));
        List<Reference> all = Database.findAll();
        assertEquals(1, all.size());
        assertEquals(ref2.getId(), all.get(0).getId());
    }

    @Test
    public void findReturnsCorrectReference() {
        Database.save(ref1);
        Reference r = Database.find(ref1.getId());
        assertNotNull(r);
        assertEquals(r.getId(), ref1.getId());
    }

    @Test
    public void findReturnsNullIfNotFound() {
        Database.save(ref1);
        assertNull(Database.find(ref1.getId() + 1));
    }

    @Test
    public void deleteReturnsFalseWhenNotFound() {
        Database.save(ref1);
        assertFalse(Database.delete(ref1.getId() + 1));
    }

    @Test
    public void deleteDoesNothingWhenNotFound() {
        Database.save(ref1);
        Database.delete(ref1.getId() + 1);
        List<Reference> all = Database.findAll();
        assertEquals(1, all.size());
    }

    @Test
    public void testFindByAuthor() {
        Database.save(ref1);
        Database.save(ref2);
        Reference ref3 = new Reference(Book, "a", "MasaDB", "M. Masa III", 1);
        Database.save(ref3);
        List<Reference> list = Database.findByAuthor("Masa I");
        assertEquals(2, list.size());
        assertEquals(ref2.getId(), list.get(0).getId());
        assertEquals(ref3.getId(), list.get(1).getId());
    }
}
